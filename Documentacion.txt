🔹🔹🔹 MySql Workbench 🔹🔹🔹

1°- Creamos la base de datos en MySql Workbench.

CREATE DATABASE school;
USE school;

CREATE TABLE cursos (
id_curso INT AUTO_INCREMENT PRIMARY KEY,
nombre VARCHAR(100),
descripcion VARCHAR(100)
);

CREATE TABLE estudiantes (
id_estudiante INT AUTO_INCREMENT PRIMARY KEY,
nombre VARCHAR(100),
apellido VARCHAR(50),
email VARCHAR(100)
);

CREATE TABLE inscripcion (
id_incripcion INT AUTO_INCREMENT PRIMARY KEY,
id_estudiante INT,
id_curso INT,
fecha_incripcion VARCHAR(100),
FOREIGN KEY (id_estudiante) REFERENCES estudiantes(id_estudiante),
FOREIGN KEY (id_curso) REFERENCES cursos(id_curso)
);

2°- Insertamos datos de prueba para cada tabla.

INSERT INTO cursos (nombre, descripcion) VALUES
('Programación en JavaScript', 'Curso básico de JS'),
('Bases de Datos MySQL', 'Introducción a MySQL'),
('Desarrollo Web con React', 'Frontend moderno con React'),
('Node.js Backend', 'Servidor con Node y Express'),
('Diseño UX/UI', 'Principios de diseño de interfaces');

INSERT INTO estudiantes (nombre, apellido, email) VALUES
('Juan', 'Pérez', 'juan.perez@gmail.com'),
('María', 'González', 'maria.gonzalez@hotmail.com'),
('Lucas', 'Fernández', 'lucas.fernandez@yahoo.com'),
('Sofía', 'Ramírez', 'sofia.ramirez@gmail.com'),
('Martín', 'López', 'martin.lopez@gmail.com'),
('Camila', 'Torres', 'camila.torres@hotmail.com'),
('Lucas', 'Gómez', 'lucas.gomez@gmail.com'),
('Valentina', 'Díaz', 'valentina.diaz@yahoo.com'),
('Federico', 'Herrera', 'fede.herrera@gmail.com'),
('Ana', 'Martínez', 'ana.martinez@hotmail.com');

INSERT INTO inscripcion (id_estudiante, id_curso, fecha_inscripcion) VALUES
(1, 1, '2025-09-01'),
(2, 2, '2025-09-02'),
(3, 3, '2025-09-03'),
(4, 1, '2025-09-04'),
(5, 4, '2025-09-05'),
(6, 2, '2025-09-06'),
(7, 5, '2025-09-07'),
(8, 3, '2025-09-08'),
(9, 4, '2025-09-09'),
(10, 5, '2025-09-10');


🔹🔹🔹 Visual Studio 🔹🔹🔹

1°- Lo primero que hacemos es crear la carpeta raíz "school" en el escritorio  y la abrimos con el Visual. Luego abrimos una nueva terminaly hacemos:
---> git init  (para después subirla a git hub)
---> npm create vite@latest (ponemos: vite-project, React, JavaScript)
Cerramos la terminal y nos quedara una carpeta "vite-project".

2°- Ahora nos posicionamos en nuestra carpeta raíz, y creamos la carpeta "Frontend" y "Backend". Nos quedará así:

school/
├── Backend/
├── Frontend/
└── vite-project/

Abrimos la carpeta "school", en el escritorio, y copiamos todos los archivos que tiene la carpeta "vite-project" dentro de la carpeta "Frontend". Luego borramos la carpeta "vite-project" y nos quedará así:

school/
├── Backend/
└── Frontend/

Volvemos al Visual y abrimos una nueva terminal, nos posicionamos en la carpeta "Frontend" y hacemos:
---> npm install 

***Esto es para instalar todas las dependencias que esten en el package.json. Crea la carpeta node_module\ .Instala todas las librerias necesarias como express, mysql2, react, vite, etc.
También genera el archivo package-lock.json donde se guarda la versión exacta de cada dependencia.

3°- Ahora abrimos una nueva terminal y nos posicionamos en la carpeta "Backend" y hacemos:
---> npm init -y
---> npm i express (framework que nos sirve para todo le manejo de peticiones http y creacion de api)
---> npm i nodemon (logra que no corte el servidor o conexión en caso de error, y se levanta automaticamente mysql)
---> npm i mysql2 (libreria para conectarlo con la bd)    

Tambien instalamos cors en el Backend:
---> npm install cors (es para que el navegador bloquee las peticones que vienen de un dominio distinto)

4°- En el "Backend" creamos el archivo "index.js" y las carpetas "controllers"(adentro creamos los archivos "cursos.js","estudiantes.js" y "inscripcion.js" ), 
"routes" (adentro creamos los archivos "cursos.js","estudiantes.js" y "inscripcion.js" ) y "config"(adentro creamos el archivo "dataBase.js").
❣ Los nombres de los archivos cursos, estudiantes e inscripcion, deben ser exactamente como los tenemos en la bd en mysql workbench.

5°- Dentro de la carpeta "src" que esta en el "Frontend", creamos la carpeta "enpoints" con su respectivo archivo "endpoints.js". 
Tambien dentro de "Components" creamos el componente Home.jsx.

La estructura queda así:

school/
├── Backend/
│    ├── config/
│    │     └── dataBase.js
│    ├── controllers/
│    │     ├── cursos.js
│    │     ├── estudiantes.js
│    │     └── inscripcion.js
│    ├── routes/
│    └── index.js
├── frontend/
│    ├── src/
│    │      └── enpoints/
│    │      │     └── endpoints.js
│    │      └── Components/
│    │            └── Home.jsx
│    │            └── Main.jsx
│    │            └── Buscador.jsx
│    │      └── Pages/
│    │      │     └── HomePages.jsx
│    │      └── Routers/
│    │            └── Router.js
│    ├── public/
│    └── package.json
└── README.md



🔹🔹🔹 ARCHIVOS IMPORTANTES  DEL BACKEND🔹🔹🔹

💜 dataBase.js ---> Este archivo hace la conexión de nuestra bd con nuestro código.

const mysql = require('mysql2');  🔹Importa la libreria mysql2 que intalamos con npm intall y es para conectar el Node.js con mysql.

const connection = mysql.createConnection({    🔹Creamos la conexión con la bd.
    host: 'localhost',
    user: 'root',
    password: '1234',
    database: 'school'
});

connection.connect((err) => {      🔹 Nos muestra un mensaje si se crea o no la conexión.
    if (err) {
        console.error('Error al conectar a la base de datos:', err);
        return;
    }
    console.log('Conectado a la base de datos 👌');
});

module.exports = { connection };   🔹Exportamos la conexión para poderla usar en otros archivos.


💜cursos.js (de la carpeta "controllers")---> Aquí definimos funciones y hacemos las consultas. Es un archivo por cada tabla que creamos.

const { connection } = require('../config/dataBase');  🔹 Aquí importamos la conexion que hicimos en dataBase.js para poder ejecutar las consultas sql.

🔹Definimos las funciones para  mostrar todos los cursos, crear un curso, editar o eliminar curso, buscar curso por id o descripcion.
En req, seria lo que requerimos y en res lo que nos responde el servidor.
El connection.query, sería como un puente que nos permite hacer consultas a la bd y nos trae la información que despues la mandamos con res.
Los ? que usamos en algunas partes, son para evitar las inyecciones sql.

const mostrarCursos = (req, res) => {   
    connection.query('SELECT * FROM cursos', (error, results) => {
        if (error) return res.status(500).json({ error: 'Error al obtener los cursos' });
        res.json(results);
    });
};


const crearCurso = (req, res) => {
    const { nombre, descripcion } = req.body;

    if (!nombre || !descripcion) {
        return res.status(400).json({ error: 'Faltan datos requeridos' });
    }

    connection.query(
        'INSERT INTO cursos (nombre, descripcion) VALUES (?, ?)',
        [nombre, descripcion],
        (error, results) => {
            if (error) return res.status(500).json({ error: 'Error al crear el curso' });
            res.json({ message: "Curso creado correctamente", id_curso: results.insertId });
        }
    );
};


const editarCurso = (req, res) => {
    const { id } = req.params;
    const { nombre, descripcion } = req.body;

    connection.query(
        'UPDATE cursos SET nombre = ?, descripcion = ? WHERE id_curso = ?',
        [nombre, descripcion, id],
        (error, results) => {
            if (error) return res.status(500).json({ error: 'Error al editar el curso' });
            if (results.affectedRows === 0) return res.status(404).json({ error: 'Curso no encontrado' });
            res.json({ id, nombre, descripcion });
        }
    );
};


const eliminarCurso = (req, res) => {
    const { id } = req.params;

    connection.query(
        'DELETE FROM cursos WHERE id_curso = ?',
        [id],
        (error, results) => {
            if (error) return res.status(500).json({ error: 'Error al eliminar el curso' });
            if (results.affectedRows === 0) return res.status(404).json({ error: 'Curso no encontrado' });
            res.status(204).send();
        }
    );
};


const buscarCursos = (req, res) => {
    const { q } = req.query;

    if (!q) {
        return res.status(400).json({ error: "Falta el parámetro de búsqueda" });
    }

    const searchTerm = `%${q}%`;
    const query = 'SELECT * FROM cursos WHERE nombre LIKE ? OR descripcion LIKE ?';

    connection.query(query, [searchTerm, searchTerm], (error, results) => {
        if (error) return res.status(500).json({ error: "Error al buscar cursos" });
        res.json(results);
    });
};

module.exports = {    🔹Exportamos todas las funciones para despues importarlas y poder usarlas router/cursos.js
    mostrarCursos,
    crearCurso,
    editarCurso,
    eliminarCurso,
    buscarCursos
};

💜 Para estudiantes.js y inscripcion.js, tambien de la carpeta "controllers", hacemos lo mismo que con cursos.js, pero personalizado para cada uno.

💜 cursos.js (de la carpeta "router") ----> Este archivo es un módulo de rutas de Express, que sirve para decirle al Backend que URL existen y que 
funciones se ejecutan cuando alguien entra a esa URL. Lo que hace Express, es que cuando venga una petición de tal ruta y con tal método (GET,POST,etc),
ejecuta la función indicada.

const express = require('express');  🔹Importamos Express
const router = express.Router();     🔹Creamos un objeto router que sirve para guardar nuestras rutas.

🔹Importamos las funciones del controller (controllers/cursos.js). Cada una es lógica que se conecta con la bd.
const {
    mostrarCursos,
    crearCurso,
    editarCurso,
    eliminarCurso,
    buscarCursos // <-- agregamos la función de búsqueda
} = require('../controllers/cursos');

router.get("/", mostrarCursos);                 // Listar todos los cursos
router.get("/buscar/query", buscarCursos);     // Búsqueda por nombre o descripción
router.post("/", crearCurso);                  // Crear nuevo curso
router.put("/:id", editarCurso);               // Editar curso
router.delete("/:id", eliminarCurso);          // Eliminar curso

module.exports = router;     🔹Exportamos el router para poder usarlo en el archivo principal(index.js)

💜 Para estudiantes.js y inscripcion.js, tambien de la carpeta "router", hacemos lo mismo que con cursos.js, pero personalizado para cada uno.

💜 index.js 

const cors = require('cors');   🔹Importa la libreria cors, que sirve para que el backend le permita al frontend hacer peticiones al servidor.
const express = require('express');  🔹Importa Express, que es el framework que maneja rutas y peticiones HTTP
const app = express();    🔹Crea una aplicación de Express, que será nuestro servidor web.
const mysql = require('mysql2');   🔹 Importación de mysql para poder conectarse a la bd.

app.use(cors());  🔹Le permite al servidor aceptar peticiones desde otros origenes.
app.use(express.json());  🔹Permite que el servidor pueda leer JSON en el body de las peticiones.

// Rutas   🔹Si alguien entra al local host tanto, muestra la ruta tanto.
app.use('/estudiantes', require('./router/estudiantes'));
app.use('/cursos', require('./router/cursos'));
app.use('/inscripcion', require('./router/inscripcion'));

const PORT = 3000;   🔹Define el puerto donde se va a levantar el servidor.
app.listen(PORT, () => {  🔹Levanta el servidor en ese puerto con nodemon index.js y muestra un mensaje en consola.
    console.log(`Servidor corriendo en http://localhost:${PORT}`);
});


🔹🔹🔹 ARCHIVOS IMPORTANTES DEL FRONTEND 🔹🔹🔹


💜 endpoints.js

export const ENDPOINTS = "http://localhost:3000";    🔹Definimos la URL principal del servidor backend.

🔹Rutas que definimos en el backend con router para cada tabla.
export const HOME_ESTUDIANTES = "/estudiantes";       // tabla estudiantes
export const HOME_CURSOS = "/cursos";             // tabla cursos
export const HOME_INSCRIPCION = "/inscripcion"; // tabla inscripciones


💜 Home.jsx
El componente Home.jsx muestra un tablero con tres tablas: estudiantes, cursos e inscripciones. Utiliza "useEffect" para llamar funciones que hacen peticiones HTTP ("GET") al 
backend mediante "axios". Cada función obtiene los datos correspondientes y los guarda en los estados ("useState"). El backend, a su vez, consulta la base de datos MySQL y devuelve los 
resultados en formato JSON. React actualiza automáticamente los estados y renderiza las tablas con los datos obtenidos, mostrando así toda la información de forma dinámica al usuario.


💜 Main.jsx

Primero importa React y ReactDOM, que son los que nos permiten crear componentes y mostrarlos en el navegador. También importa nuestro componente principal "App" y los estilos globales 
index.css. Luego busca en el HTML el <div> con id root y le dice a React: “aquí dibujame  toda la aplicación”. Con ReactDOM.createRoot(...).render(...) se arranca la app, 
mostrando App dentro de <React.StrictMode> para que nos avise si hacemos algo que pueda dar problemas mientras estamos desarrollando. A partir de ahí, React se encarga de mostrar y 
actualizar automáticamente todo lo que está dentro de App, sin que tengamos que tocar el HTML manualmente.

💜 Buscador.jsx
El componente **Buscador** permite buscar datos en estudiantes, cursos e inscripciones. Cuando escribís algo y das “Buscar”, hace peticiones al backend para traer coincidencias en las 
tres tablas y guarda los resultados en el estado. Mientras carga, muestra un mensaje “Cargando…”, y si hay algún error lo muestra en rojo. Los resultados se muestran en listas separadas 
por tabla, y con el botón “Borrar” se limpia todo. 


👀IMPORTANTE:
Tambien instalamos axios para hacer peticiones al backend, react-router-dom para manejar rutas y navegación entre páginas, y react-bootstrap junto con bootstrap para usar componentes y 
estilos predefinidos. 
Para instalarlas, abrimos la terminal y nos posicionamos en la carpeta Backend y ejecutamos: 
---> npm install axios 
---> npm install react-router-dom 
---> npm install react-bootstrap bootstrap
Es para tener todas las librerías disponibles en node_modules y  que podemos importarlas en nuestros componentes para usar fetch, rutas y estilos fácilmente.




💜 Routers/router.js

export const BASE_URL = "http://localhost:3000";
export const HOME_ESTUDIANTES = `${BASE_URL}/estudiantes`;
export const HOME_CURSOS = `${BASE_URL}/cursos`;
export const HOME_INSCRIPCION = `${BASE_URL}/inscripcion`;

Se define las rutas que usa el frontend para conectarse al backend. BASE_URL es la dirección del backend (http://localhost:3000) y las constantes HOME_ESTUDIANTES, HOME_CURSOS y 
HOME_INSCRIPCION combinan la base con cada ruta de las tablas correspondientes. De esta forma, cuando hacemos peticiones con axios o fetch, solo importamos estas constantes y 
evitamos escribir la URL completa cada vez, lo que hace más fácil mantener y actualizar las rutas si cambia el backend.

💜 Pages/HomePage.jsx
Este componente HomePage es básicamente la página principal de nuestra app. Solo importa dos componentes: Buscador y Home. Dentro del return, primero muestra el Buscador
(para buscar estudiantes, cursos o inscripciones) y luego el Home (que es el tablero con todas las tablas). Al final, exporta HomePage para poder usarlo en el router o en otros 
componentes de la app. Es como un contenedor que junta el buscador y el tablero en una misma página.










